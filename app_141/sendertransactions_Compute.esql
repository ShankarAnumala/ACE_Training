--
--DECLARE SHARED_ROW SHARED ROW;
--DECLARE SHARED_DATE SHARED DATE;
--CREATE COMPUTE MODULE sendertransactions_Compute
--	
--	
--	CREATE FUNCTION Main() RETURNS BOOLEAN
--	BEGIN
--		-- CALL CopyMessageHeaders();
--		 CALL CopyEntireMessage();
--		RETURN TRUE;
--	END;
--
--	CREATE PROCEDURE CopyMessageHeaders() BEGIN
--		DECLARE I INTEGER 1;
--		DECLARE J INTEGER;
--		SET J = CARDINALITY(InputRoot.*[]);
--		WHILE I < J DO
--			SET OutputRoot.*[I] = InputRoot.*[I];
--			SET I = I + 1;
--		END WHILE;
--	END;
--
--	CREATE PROCEDURE CopyEntireMessage() BEGIN
----		DECLARE i INTEGER;
----		-- DECLARE dataname CHARACTER;
----		DECLARE inRef CHARACTER InputRoot.XMLNSC.username;
----		DECLARE qry CHARACTER 'select * from sender1';
----		SET row1.data[] = PASSTHRU(qry TO Database.DBDSN);
----		
----	--	MOVE inRef LASTCHILD;
----         DECLARE j INTEGER CARDINALITY(row1.data[]);
----		
----		
----			
----             SET i = 1;
----			X:WHILE (i<=j) DO
----			 SET Environment.name[i].data= row1.data[i].name;
----			IF Environment.name[i].data = inRef THEN
----				SET OutputRoot.XMLNSC.DATA.ID = row1.data.id;
----				SET OutputRoot.XMLNSC.DATA.NAME = row1.data.name;
----				SET OutputRoot.XMLNSC.DATA.PLACE = row1.data.place;
----				LEAVE X;
----				
----
----	ELSEIF 1>2 THEN
------				SET Ex_Desc = inRef.Text;
------				MOVE inRef PREVIOUSSIBLING;
------				SET Ex_Desc = Ex_Desc || COALESCE(inRef.Text,'.');
------
------				MOVE inRef PARENT;
------				SET Ex_Name = FIELDNAME(inRef);
------				SET Ex_Code = SUBSTRING(inRef.Catalog FROM 1 FOR 3) || CAST(inRef.Number AS CHARACTER);
------				SET Ex_Desc = inRef.Text || Ex_Desc;
------
------				LEAVE X;
----			END IF;
----			
----			-- MOVE inRef NEXTSIBLING;
----		END WHILE;
----		
--		CALL LOGDB();
--		DECLARE DBREF REFERENCE TO SHARED_ROW.Record[>];
--		DECLARE INREF REFERENCE To InputRoot.XMLNSC.Employee[>];
--		WHILE LASTMOVE(DBREF) DO
--
--			IF (UCASE(DBREF.EMP_NAME) = UCASE(INREF.EMP_NAME))THEN
--				DECLARE iquery CHARACTER 'SELECT * FROM EIDIKO_TRANSACTION_LOG WHERE EMP_NAME =?';
--				SET Environment.Transactions[]=PASSTHRU(iquery TO Database.DBDSN VALUES (LCASE(INREF.EMP_NAME)));
--
--				DECLARE TRef REFERENCE TO Environment.Transactions[>];
--
--				D:WHILE LASTMOVE(TRef) DO
--				IF (UCASE(TRef.TRANSACTION_STATUS) =UCASE('fundsnotavailable')) THEN
--					SET OutputRoot.XMLNSC.Result.Sender='fundsnotavailable For Sender';
--					LEAVE D;
--
--				END IF;
--				MOVE TRef NEXTSIBLING;
--			END WHILE;
--		ELSE
--			SET OutputRoot.XMLNSC.Result.Sender='No Sender Found';
--
--		END IF;
--
--		MOVE DBREF NEXTSIBLING;
--	END WHILE;
--
--END;
--
--
--
--CREATE PROCEDURE LOGDB ( )
--BEGIN
--	IF SHARED_DATE IS NULL THEN
--		SET SHARED_DATE = CURRENT_DATE;
--		DECLARE query CHARACTER 'SELECT * FROM EIDIKO';
--		SET SHARED_ROW.Record[]= PASSTHRU(query TO Database.DBDSN);
--	END IF;
--END;
--END MODULE;



DECLARE tableData SHARED ROW;

CREATE COMPUTE MODULE sendertransactions_Compute
CREATE FUNCTION Main() RETURNS BOOLEAN
BEGIN
-- CALL CopyMessageHeaders();
CALL CopyEntireMessage();
RETURN TRUE;
END;

CREATE PROCEDURE CopyMessageHeaders() BEGIN
DECLARE I INTEGER 1;
DECLARE J INTEGER;
SET J = CARDINALITY(InputRoot.*[]);
WHILE I < J DO
SET OutputRoot.*[I] = InputRoot.*[I];
SET I = I + 1;
-- <emp>
--<name>CHANDU</name>
--</emp>
END WHILE;
END;

CREATE PROCEDURE CopyEntireMessage() BEGIN
DECLARE inRef REFERENCE TO InputRoot.XMLNSC.emp[>];
DECLARE eidikoTableData CHARACTER 'SELECT * FROM EIDIKO';
SET tableData.values[] = PASSTHRU(eidikoTableData To Database.DBDSN);
DECLARE tableRef REFERENCE TO tableData.values[>];
-- IF tableData.values.NAME = inRef.name THEN
X: WHILE LASTMOVE(tableRef) DO
IF tableRef.NAME = inRef.name THEN
DECLARE secondTable CHARACTER 'SELECT * FROM EIDIKO_TRANSACTION_LOG WHERE NAME = ?';
DECLARE secondTableRow ROW;
SET secondTableRow.values[] = PASSTHRU(secondTable TO Database.DBDSN VALUES (inRef.name));
DECLARE secondTableRef REFERENCE TO secondTableRow.values[>];
WHILE LASTMOVE(secondTableRef) DO
IF secondTableRef.INFO = 'AVAILABLE' THEN
SET OutputRoot.XMLNSC.Response.code = inRef.name|| '=' || 'Available';
ELSE
SET OutputRoot.XMLNSC.Response.code = 'Funds Not Available';
-- CASE
-- WHEN secondTableRow.values.INFO = inRef.info THEN
-- SET OutputRoot.XMLNSC.Response.code = 'Chandu : Not_Available';
-- ELSE
-- SET OutputRoot.XMLNSC.Response.code = 'Improper Input';
-- END CASE;

END IF;
LEAVE X;

MOVE secondTableRef NEXTSIBLING;
END WHILE;
ELSE
SET OutputRoot.XMLNSC.Response.code = 'Name Not Found in First Table';
END IF;

MOVE tableRef NEXTSIBLING;
END WHILE;





END;
END MODULE;